@page "/test"
@implements IDisposable
@inject HotKeys HotKeys

<h1>Test All Keys</h1>

<div class="entered-keys">
    @foreach (var enteredKey in EnteredKeys)
    {
        <div @key="enteredKey.Id">@enteredKey.Text x @enteredKey.RepeatCount</div>
    }
</div>

@code{
    public class EnteredKey
    {
        public readonly Guid Id = Guid.NewGuid();

        public string Text;

        public int RepeatCount = 1;
    }

    private HotKeysContext HotKeysContext;

    private readonly List<EnteredKey> EnteredKeys = new();

    private EnteredKey LastEnteredKey = null;

    protected override void OnInitialized()
    {
        this.HotKeysContext = this.HotKeys.CreateContext();

        var modKeysCombinations = new[] {
            ModKeys.Shift,
            ModKeys.Ctrl,
            ModKeys.Shift | ModKeys.Ctrl,
            ModKeys.Alt,
            ModKeys.Alt | ModKeys.Shift,
            ModKeys.Alt | ModKeys.Ctrl,
            ModKeys.Alt | ModKeys.Ctrl | ModKeys.Shift
        };

        foreach (var key in Enum.GetValues<Keys>())
        {
            this.HotKeysContext.Add(ModKeys.None, key, OnHotKey);

            foreach (var modKeys in modKeysCombinations)
            {
                if (key == Keys.Shift && modKeys.HasFlag(ModKeys.Shift)) continue;
                if (key == Keys.Ctrl && modKeys.HasFlag(ModKeys.Ctrl)) continue;
                if (key == Keys.Alt && modKeys.HasFlag(ModKeys.Alt)) continue;

                this.HotKeysContext.Add(modKeys, key, OnHotKey);
            }
        }
    }

    private void OnHotKey(HotKeyEntry hotKeyEntry)
    {
        var text = (hotKeyEntry.ModKeys == ModKeys.None ? "" : (hotKeyEntry.ModKeys.ToString() + " + ")) + hotKeyEntry.Key.ToString();
        if (LastEnteredKey?.Text == text)
        {
            LastEnteredKey.RepeatCount++;
        }
        else
        {
            var enteredKey = new EnteredKey { Text = text };
            LastEnteredKey = enteredKey;
            EnteredKeys.Insert(0, enteredKey);
            if (EnteredKeys.Count > 10) EnteredKeys.RemoveAt(10);
        }
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.HotKeysContext?.Dispose();
    }

}